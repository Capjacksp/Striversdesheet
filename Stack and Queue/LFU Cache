#include <bits/stdc++.h>
class LFUCache{
    class Node {
    public: 
        int key;
        int value;
        Node* next;
        Node* prev;
        Node(int k, int v){ 
            key = k;
            value = v;
            next = NULL;
            prev = NULL;
        }
    };
    int size;
    Node *least;
    Node *freq;
    unordered_map<int, Node*> umap;
public:
    LFUCache(int capacity){
        size = capacity;
        least = new Node(-1, -1);
        freq = new Node(-1, -1);
        least->next = freq;
        freq->prev = least;
    }

    int get(int key){
        if(umap.find(key) == umap.end())return -1;
        Node *n = umap[key];
        Node *prev = n->prev;
        Node *next = n->next;
        prev->next = next;
        next->prev = prev;
        next = freq->prev;
        next->next = n;
        n->prev = next;
        n->next = freq;
        freq->prev = n;
        return n->value;
    }

    void put(int key, int value){
        Node *n = nullptr;
        auto p = umap.find(key);
        if(p != umap.end()) {
            p->second->value = value;
            n = p->second;
            n->prev->next = n->next;
            n->next->prev = n->prev;
        }
        else if(umap.size() == size) {
            umap.erase(least->next->key);
            least->next->next->prev = least;
            least->next = least->next->next;
        }
        if(n == nullptr) n = new Node(key, value);
        umap[key] = n;
        n->next = freq;
        n->prev = freq->prev;
        freq->prev->next = n;
        freq->prev = n;
    }
};
