#include<bits/stdc++.h>
class Node{
private:
    Node*list[2];
public:
    bool containkey(int x){
        return (list[x]!=NULL);
    }
    void put(int x, Node* node){
        list[x]=node;
    }
    Node* get(int x){
        return list[x];
    }
};

class Trie{
private:
    Node*root;
public:
    Trie(){
        root=new Node();
    }
    void insert(int num){
        Node* node=root;
        for(int i=31;i>=0;i--){
            int bit = num>>i&1;
            if(!node->containkey(bit)){
                node->put(bit,new Node());
            }
            node=node->get(bit);
        }
    }    
    int getMaxXor(int num){
        Node* node= root;
        int maxsum=0;
        for(int i=31;i>=0;i--){
            int bit = num>>i & 1;
            if(node->containkey(1-bit)){
                maxsum=maxsum | (1<<i);
                node=node->get(1-bit);
            }
            else node=node->get(bit);
        }
        return maxsum;
    }
};
static bool comp(vector<int>&a,vector<int>&b){
    return a[1]<b[1];
}

vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
	Trie trie;
    int n = arr.size();
    int m = queries.size();
    vector<int>ans(m,0);
    for(int i=0;i<m;i++){
        queries[i].push_back(i);
    }
    sort(arr.begin(),arr.end());
    sort(queries.begin(),queries.end(),comp);
    int i=0;
    for(int j =0;j<m;j++){
        while(i<n && arr[i]<=queries[j][1]){
            trie.insert(arr[i]);
            i++;
        }
        
        if(i==0)ans[queries[j][2]]=-1;
        else ans[queries[j][2]]=trie.getMaxXor(queries[j][0]);
    }
    return ans;
}





