#include<bits/stdc++.h>

class Node{
private:
    Node *lists[26];
    bool flag=false;
public:
    bool containkey(char ch){
        return (lists[ch-'a']!=NULL);
    }
    void put(char ch, Node* node){
        lists[ch-'a']=node;
    }
    Node* get(char ch){
        return lists[ch-'a'];
    }
    void setEnd(){
        flag=true;
    }
    bool isEnd(){return flag;}
};

class Trie{
private:
    Node*root;
public:
    Trie(){
        root = new Node();
    }
    void insert(string word){
        Node*node = root;
        for(int i =0;i<word.length();i++){
            if(!node->containkey(word[i])){
                node->put(word[i],new Node());
            }
            node=node->get(word[i]);
        }
        node->setEnd();
    }
    bool searchword(string word){
        Node*node=root;
        for(int i=0;i<word.length();i++){
            if(!node->containkey(word[i]))return false;
            node=node->get(word[i]);
        }
        return node->isEnd();
    }
    bool checkprefix(string prefix){
        Node*node=root;
        for(int i=0;i<prefix.length();i++){
            if(!node->containkey(prefix[i]))return false;
            node=node->get(prefix[i]);
            if(node->isEnd()==false)return false;
        }
        return true;
    }
};



string completeString(int n, vector<string> &a){
    Trie trie;
    string s = "";
    for(int i=0;i<n;i++){
        trie.insert(a[i]);
    }
    for(int i=0;i<n;i++){
        if(trie.checkprefix(a[i])){
            if(s.length() < a[i].length())s=a[i];
            else if(s.length()==a[i].length()){
                if(s > a[i])s=a[i];
            }
        }
        
    }
    if(s=="")return "None";
    return s;
}









