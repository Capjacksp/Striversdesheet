/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/
#include<bits/stdc++.h>

bool isleaf(TreeNode<int>*root){
    return (root->left==NULL && root->right==NULL);
}
    


void leftboundary(TreeNode<int> * root ,vector<int>&ans){
    if(root==NULL)return;
    while(root){
        if(!isleaf(root))ans.push_back(root->data);
        if(root->left)root=root->left;
        else root = root->right;
    }
    
}

void leafs(TreeNode<int>*root, vector<int>&ans){
    if(!root)return;
    if(isleaf(root))ans.push_back(root->data);
    leafs(root->left,ans);
    leafs(root->right,ans);
}

void rightboundary(TreeNode<int>*root, vector<int>&temp){
    if(!root)return;
    while(root){
        if(!isleaf(root))temp.push_back(root->data);
        if(root->right)root=root->right;
        else root = root->left;
    }
}





vector<int> traverseBoundary(TreeNode<int>* root){
    vector<int> ans,temp;
    if(isleaf(root))return {root->data};
    ans.push_back(root->data);
    leftboundary(root->left ,ans);
    leafs(root,ans);
    rightboundary(root->right,temp);
    for(int i=temp.size()-1;i>=0;i--){
        ans.push_back(temp[i]);
    }
    return ans;
}

















