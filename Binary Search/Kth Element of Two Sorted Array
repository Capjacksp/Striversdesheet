#include<bits/stdc++.h>
int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    if(m>n)return ninjaAndLadoos(row2,row1,n,m,k);
    int l = max(0,k-n);
    int h = min(k,m);
/* There are two eage cases... If you are given a spacific range so then you have to handle eage cases (or a overflow type case )  For l and h => l=max(0,k-n) because if 2nd array length if sorted then the range(k) you want you have to pick more element from 1st array ..... Similarly for h = min(k,m) because if 1st array is sorter then the range(k) you have to pick minimum of range k,m so that you will not pick more element then the 1st array size  
    */
    
    while(l<=h){
        int c1 = (l+h)/2;
        int c2 = k-c1; 
/*(In binary search) We always take c2(c1 is fixed (l+h)/2) in a range that we want Like if you want to find median 
  than you have to take c2 that is total length median (n+m+1)/2 - c1 so that it can match with half length of total 
  length (so that every time our pointer will pointing on middle of two sorted arraty)*/
        int l1 = c1==0?INT_MIN:row1[c1-1];
        int l2 = c2==0?INT_MIN:row2[c2-1];
        int h1 = c1==m?INT_MAX:row1[c1];
        int h2 = c2==n?INT_MAX:row2[c2];
        if(l1<=h2 && l2<=h1){
            return max(l1,l2);
        }
        if(l1>h2)h=c1-1;
        else l = c1+1;
    }
    
    
}
