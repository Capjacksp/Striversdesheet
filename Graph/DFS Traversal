void dfs(int x, vector<int>adj[],vector<int>&vis,vector<int>&v){
    v.push_back(x);
    vis[x]=1;
    for(auto it:adj[x]){
        if(!vis[it]){
            dfs(it,adj,vis,v);
        }
    }
    
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges){
    vector<int> adj[V];
    vector<int>vis(V+1,0);
    vector<int>v;
    vector<vector<int>>ans;
    int n = edges.size();
    for(int i=0;i<n;i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }

    for(int i=0;i<V;i++){
        if(!vis[i]){
            dfs(i, adj,vis,v);
            sort(v.begin(),v.end());
            ans.push_back(v);
            v.clear();
        }
        
    }
    
    return ans;
    
}
