#include<bits/stdc++.h>
///////////////////////Using Bfs///////////////////
bool check(int i, vector<int>adj[], int n, vector<int>&color){
    queue<int>q;
    q.push(i);
    color[i]=0;
    while(!q.empty()){
        int node = q.front();
        q.pop();
        for(auto it:adj[node]){
            if(color[it]==color[node])return false;
            if(color[it]==-1){
                if(color[node]==0)color[it]=1;
                else color[it]=0;
                q.push(it);
            }
        }
    }
    return true;
}

bool bfs(vector<int>adj[],vector<int>&color, int n){
    for(int i=0;i<n;i++){
        if(color[i]==-1){
            if(!check(i,adj,n,color))return false;
        }
      }
    return true;
}

///////////////////////Using DFS////////////////////

bool check_dfs(int i ,int prev, vector<int>adj[],vector<int>&color){
    if(color[prev]==-1)color[i]=0;
    else if(color[prev]==0)color[i]=1;
    else if(color[prev]==1)color[i]=0;
    for(auto it:adj[i]){
        if(color[it]==-1){
            if(!check_dfs(it,i,adj,color))return false;
        }
        else if(color[it]==color[i])return false;
    }
    return true;
}

bool dfs(vector<int>adj[],vector<int>&color, int n){
    for(int i=0;i<n;i++){
        if(color[i]==-1){
            if(!check_dfs(i,2,adj,color))return false;
        }
    }
    return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
    int N  = edges.size();
    int M  = edges[0].size();
	vector<int>adj[N];
    vector<int>color(N,-1);
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            if(edges[i][j]==1){
                adj[i].push_back(j);
                adj[j].push_back(i);
            }
        }
    }
//     return bfs(adj,color,N);
    return dfs(adj,color,N);
}
