#include<bits/stdc++.h>
#define pi pair<int,int>
#define f first
#define s second

string using_bfs(vector<int>adj[], int n, vector<int>&vis){
    
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            queue<pi>q;
            q.push({i,-1});
            vis[i]=1;
            while(!q.empty()){
                pi p = q.front();
                q.pop();
                int prev = p.s;
                int node = p.f;
                for(auto it:adj[node]){
                    if(!vis[it]){
                        q.push({it,node});
                        vis[it]=1;
                    }
                    else if(it!=prev)return "Yes";
                }
            }
        }
    }
    return "No";

}



bool cycle_de(int i, int prev, vector<int>adj[],vector<int>&vis){
    vis[i]=1;
    for(auto it:adj[i]){
        if(!vis[it]){if(cycle_de(it,i,adj,vis))return true;}
        else if(it!=prev)return true;
    }
    return false;
}
string using_dfs(vector<int>adj[], int n, vector<int>&vis){
    for(int i=1;i<=n;i++){
        if(!vis[i]){
            if(cycle_de(i,-1,adj,vis))return "Yes";
        }
    }
    return "No";
}






string cycleDetection (vector<vector<int>>& edges, int n, int m){
    vector<int>adj[n+1];
    vector<int>vis(n+1,0);
    for(int i=0;i<edges.size();i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
//     return using_bfs(adj,n,vis);
    return using_dfs(adj,n,vis);    
}




