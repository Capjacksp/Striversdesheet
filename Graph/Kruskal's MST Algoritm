#include<bits/stdc++.h>
#define pip pair<int,pair<int,int>>
#define f first 
#define s second 

static bool comp(pip &a , pip &b){
    return a.f<b.f;
}


int findpair(int u , vector<int>&parent){
    if(u==parent[u])return u;
    return findpair(parent[u],parent);
}

void unionn(int u ,int v, vector<int>&parent, vector<int>&rank){
    u=findpair(u,parent);
    v=findpair(v,parent);
    if(rank[u]<rank[v])parent[u]=v;
    else if(rank[u]>rank[v])parent[v]=u;
    else {
        parent[v]=u;
        rank[u]++;
    }
     
    
    
}


int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	vector<pip>v;
    for(int i=0;i<m;i++){
        v.push_back({graph[i][2], {graph[i][0]-1,graph[i][1]-1}});
        v.push_back({graph[i][2], {graph[i][1]-1,graph[i][0]-1}});
    }
    sort(v.begin(),v.end(), comp);
    vector<int> parent(n);
    vector<int> rank(n,0);
    for(int i=0;i<n;i++){
        parent[i]=i;
    }
    int ans=0;
    for(auto it:v){
        int val = it.f;
        int x = it.s.f;
        int y = it.s.s;
        if(findpair(x,parent)!=findpair(y,parent)){
            ans+=val;
            unionn(x,y,parent,rank);
        }
    }
    return ans;
    
}





