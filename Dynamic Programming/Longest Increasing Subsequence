#include<bits/stdc++.h>
int solve(int i,int prev , int arr[], int n, vector<vector<int>>&dp){
    if(i==n)return 0;
    if(dp[i][prev+1]!=-1)return dp[i][prev+1];
    int len = solve(i+1,prev,arr,n,dp);
    if(prev==-1 || arr[i]>arr[prev])len = max(len,1+solve(i+1,i,arr,n,dp));
    return dp[i][prev+1]=len ;
}

int tabu(int arr[], int n ){
    vector<int> curr(n+1,0);
    vector<int> next(n+1,0);
    for(int i=n-1;i>=0;i--){
        for(int j=i-1;j>=-1;j--){
            int len = next[j+1];
            if(j==-1 || arr[i]>arr[j]){
                len = max(len, 1+next[i+1]);
            }
            curr[j+1]=len;
        }
        next=curr;
    }
    return next[-1+1];
}
int longestIncreasingSubsequence(int arr[], int n){
//     vector<vector<int>>dp(n, vector<int>(n+1,-1));
//     return solve(0,-1,arr,n,dp);
//     return tabu(arr,n);
    vector<int>temp;
    temp.push_back(arr[0]);
    for(int i=0;i<n;i++){
        if(temp.back() < arr[i])temp.push_back(arr[i]);
        else {
            auto idx= lower_bound(temp.begin(),temp.end(),arr[i]);
            temp[idx-temp.begin()]=arr[i];
        }
    }
    return temp.size();
}





