#include<bits/stdc++.h>
int solve(string s ,string t, int i , int j, vector<vector<int>>&dp){
    if(i<0 || j<0)return 0;
    if(dp[i][j]!=-1)return dp[i][j];
    if(s[i]==t[j]){
        return dp[i][j]=1+solve(s,t,i-1,j-1,dp);
    }
    else  return dp[i][j]=0+max(solve(s,t,i-1,j,dp),solve(s,t,i,j-1,dp));
}

int tabu(string s , string t, int n ,int m ){
    vector<int>curr(m+1,0);
    vector<int>prev(m+1,0);
    for(int i =1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(s[i-1]==t[j-1]){
                curr[j]= 1+prev[j-1];
            }
            else curr[j] = max(prev[j],curr[j-1]);
            
        }
        prev=curr;
    }
    return prev[m];
    
}


int lcs(string s, string t){
    int n= s.size();
    int m= t.size();
//     vector<vector<int>>dp(n,vector<int>(m,-1));
//     return solve(s,t,n-1,m-1,dp);
    
    return tabu(s,t,n,m);
    
    
    
}
