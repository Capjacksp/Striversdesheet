#include<bits/stdc++.h>
int solve(vector<int>&v, vector<int>&w, int i, int wt, vector<vector<int>>&dp){
    if(i<0)return 0;
    if(dp[i][wt]!=-1)return dp[i][wt];
    int not_take = solve(v,w,i-1,wt,dp);
    int take=INT_MIN;
    if(wt-w[i]>=0){
        take= v[i]+solve(v,w,i-1,wt-w[i],dp);
    }
    return dp[i][wt]=max(take,not_take);
}


int maxProfit(vector<int> &values, vector<int> &weights, int n, int w){
//     vector<vector<int>>dp(n,vector<int>(w+1,-1));
//     return solve(values,weights,n-1,w,dp);
    vector<int>prev(w+1,0);
    for(int i=weights[0];i<=w;i++){
        prev[i]=values[0];
    }
    for(int i=1;i<n;i++){
        for(int j=w;j>=0;j--){
            int no_take = prev[j];
            int take=INT_MIN;
            if(weights[i]<=j){
                take=values[i]+prev[j-weights[i]];
            }
            prev[j]=max(take,no_take);
        }
    }
    
    return prev[w];
    
    
}


