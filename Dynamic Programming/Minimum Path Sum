#include<bits/stdc++.h>
////// recursion with memorization TC = O(m*n)  SC = O(n*m)+O(n-1)+O(m-1) 
int solve(int i,int j, int n , int m , vector<vector<int>>&grid,vector<vector<int>>&dp){
    if(i==n-1 && j==m-1)return grid[n-1][m-1];
    if(i>=n || j>=m)return 1e9;
    if(dp[i][j]!=-1)return dp[i][j];
    int l = grid[i][j]+solve(i,j+1,n,m,grid,dp);
    int d = grid[i][j]+solve(i+1,j,n,m,grid,dp);
    return dp[i][j]=min(l,d);
}

int memo_tabu(vector<vector<int>>&grid, int n,int m){
    vector<int>prevrow(m,0);
    for(int i=0;i<n;i++){
        vector<int>prevcol(m,0);
            for(int j=0;j<m;j++){
                if(i==0 && j==0)prevcol[j] = grid[i][j];
                else {
                    int l = grid[i][j];
                    if(j>0)l+=prevcol[j-1];
                    else l+=1e9;
                    int u = grid[i][j];
                    if(i>0)u+=prevrow[j];
                    else u+=1e9;
                    prevcol[j]=min(l,u);
                }
            }
            prevrow=prevcol;
    }
    return prevrow[m-1];
}




int minSumPath(vector<vector<int>> &grid){
    int n = grid.size();
    int m = grid[0].size();
//     vector<vector<int>>dp(n,vector<int>(m,-1));
//     return solve(0,0,n,m,grid,dp);
    return memo_tabu(grid,n,m);
}
